<?xml version="1.0" encoding="us-ascii"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="info" docName="draft-rundgren-jose-json-crypto-normalization-00" ipr="trust200902">
  <front>
    <title abbrev="draft-rundgren-jose-json-crypto-normalization">
      JSON Crypto Normalization (JCN)
    </title>

    <author fullname="Anders Rundgren" initials="A." surname="Rundgren">
      <organization>Independent</organization>
      <address>
        <postal>
          <street></street>
          <code></code>
          <city>Montpellier</city>
          <country>France</country>
        </postal>
        <email>anders.rundgren.net@gmail.com</email>
      </address>
    </author>

    <date year="2018" />

    <area>Security</area>

    <workgroup>JSON Object Signing and Encryption (JOSE)</workgroup>

    <keyword>
      JOSE, JSON, ECMAScript, Signatures, Cryptography, Canonicalization
    </keyword>

    <abstract>
      <t>
        Cryptographic operations like hashing and signing depend on that the
        target data does not change during serialization, transport, or parsing.
        By applying the JCN (JSON Crypto Normalization) scheme, data provided in the
        JSON <xref target="RFC8259"/> format can be exchanged &quot;as is&quot;,
        while still being suitable for cryptographic operations.
        JCN achieves this by exploiting the strict predictability
        offered by the JSON parsing and serialization methods defined in
        ECMAScript beginning with version 6 <xref target="ES6"/>.
      </t>
      <t>
        The intended audience of this document is JSON tool vendors who
        may need updating their products in order to support schemes like
        Cleartext JSON Web Signature <xref target="CT-JWS"/>,
        building on ECMAScript <xref target="ES6"/> JSON processing rules.
        The latter also have utility outside of cryptography.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>
        Cryptographic operations like hashing and signing depend on that the
        target data does not change during serialization, transport, or parsing.
        A straightforward way of accomplishing this is converting the data into
        a format which has a simple and fixed representation like Base64Url <xref target="RFC4648"/>
        which for example have been used in JWS <xref target="RFC7515"/>.
        Another solution is creating a canonicalized version of the target data
        with XML Signature <xref target="XMLDSIG"/> as a prime example.
      </t>
      <t>
        Although the mentioned approaches obviously work, the ability
        applying cryptographic operations on JSON data (without encoding it
        in Base64Url or having to rely on standalone canonicalizers) became
        fully realistic with the advent of ECMAScript (aka JavaScript) version 6
        from now on referred to as "ES6".
      </t>
      <t>
        Realistic in this context means &quot;available&quot; since ES6
        compatible JSON processing is already supported by most Web browsers,
        Node.js <xref target="NODEJS"/>,
        as well as by third party libraries like Open&nbsp;Keystore <xref target="OPENKEY"/>.
      </t>
      <t>
        The JCN specification describes how JSON processing rules compliant
        with ES6, can be used for supporting &quot;Crypto&nbsp;Safe&quot; JSON.
      </t>
    </section>

    <section anchor="Terminology" title="Terminology">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.
      </t>
    </section>

    <section anchor="Operation" title="Detailed Operation">
      <t>
        This section elaborates on the different issues related to JCN and how they are addressed by ES6.
      </t>
      <section anchor="json.parsing" title="Core JSON Parsing">
        <t>
          When parsing JSON string data the following MUST be taken in account:
        </t>
        <t>
          <list style="symbols">
            <t>
              The input data MUST conform to JSON as specified in <xref target="RFC8259"/>.
              Note: ES6 requires that data encoded as UTF-8 <xref target="UNICODE"/>,
              is converted to the ES6 string format, in order to make it processable
              by the ES6 <spanx style="verb">JSON.parse()</spanx> method.
            </t>
            <t>
              The property names within a JSON object MUST be unique.  Note: this is
              currently not checked by ES6 compatible parsers.
            </t>
            <t>
              Whitespace MUST be removed which in practical terms means removal
              of all characters outside of quoted strings having a value of x09,
              x0a, x0d or x20.  This is the de-facto standard for JSON parsers,
              indirectly derived from the JSON <xref target="RFC8259"/> specification
              itself.
            </t>
            <t>
              All JSON escape sequences (\/ \&quot; \\ \b \f \n \r \t \uhhhh) within quoted strings
              MUST be converted to their proper single character internal representation.
              ES6 defines this behavior in Section <xref target="ES6" format="none">11.8.4</xref>.
            </t>
          </list>
        </t>
      </section>
      <section anchor="json.proporder" title="Preserving JSON Property Order">
        <t>
          It is common knowledge that the order of properties in JSON is insignificant.
        </t>
        <t>
          However, this is not equivalent with disrespecting the order in which properties
          are supplied in JSON data during parsing or serialization.
          It is obvious that if you parse (or create) a JSON object like
        </t>
        <t>
          <figure align="center">
            <artwork><![CDATA[  {
    "Name": "John Doe",
    "Address": "2000 Sunset Boulevard",
    "City": "Los Angeles",
    "Zip": "90001",
    "State": "CA"
  }]]></artwork>
          </figure>
        </t>
        <t>
          and it would serialize like
        </t>
        <t>
          <figure align="center">
            <artwork><![CDATA[  {
    "Zip": "90001",
    "Address": "2000 Sunset Boulevard",
    "City": "Los Angeles",
    "Name": "John Doe",
    "State": "CA"
  }]]></artwork>
          </figure>
        </t>
        <t>
          the result would not only possibly surprise the developer; it would break a signature
          depending on an immutable representation of JSON data.
        </t>
        <t>
          ES6 does with a minor exception described in <xref target="es6.interoperability"/>,
          maintain an internal &quot;Creation&nbsp;Order&quot; of properties, per 
          Section <xref target="ES6" format="none">9.1.12</xref> of ES6.
          This ordering applies to the following core operations that may
          be used for dealing with &quot;Crypto&nbsp;Safe&quot; JSON data:
        </t>
        <t>
          <list style="symbols">
            <t>
              Creation of an empty JSON object:
              <list style="empty">
                <t>obj = {}</t>
              </list>
            </t>
            <t>
              Parsing of a JSON string into a JSON object:
              <list style="empty">
                <t>obj = JSON.parse('...')</t>
              </list>
            </t>
            <t>
              Serialization of a JSON object into JSON string:
              <list style="empty">
                <t>... = JSON.stringify(obj)</t>
              </list>
            </t>
            <t>
              Shallow cloning (only the top level properties are copied) of a JSON object:
              <list style="empty">
                <t>... = Object.assign({}, obj)</t>
              </list>
            </t>
            <t>
              Deep cloning of a JSON object:
              <list style="empty">
                <t>... = JSON.parse(JSON.stringify(obj))</t>
              </list>
            </t>
            <t>
              Deletion of a JSON property:
              <list style="empty">
                <t>delete obj.property</t>
              </list>
            </t>
            <t>
              Addition of a JSON property:
              <list style="empty">
                <t>obj.property = ...</t>
              </list>
            </t>
          </list>
        </t>
        <t>
          Although the above is specified in ES6 notation, a JSON tool kit
          for another platform MUST be able providing the same functionality
          in order to be compliant with this specification.
        </t>
      </section>
      <section anchor="json.serialization" title="JSON Serialization">
        <t>
          Assume that you parse a JSON object like the following
          using the rules outlined in the previous sections:
        </t>
        <t>
          <figure align="center">
            <artwork><![CDATA[  {
    "escaping": "\u20ac$\u000F\u000aA'\u0042\u0022\u005c\\\"\/",
    "numbers": [1E30,4.50,6,2e-3,0.000000000000000000000000001]
  }]]></artwork>
          </figure>
        </t>
        <t>
          If you subsequently serialize the object created by the operation above,
          using an ES compliant serializer,
          the result would (with a line wrap between elements for display purposes only),
          be rather divergent with respect to data representation:
        </t>
        <t>
          <figure align="center"><artwork><![CDATA[  {"escaping":"\u20ac$\u000f\nA'B\"\\\\\"/","numbers":
  [1e+30,4.5,6,0.002,1e-27]}]]></artwork>
          </figure>
        </t>
        <t>Note: \u20ac denotes the Euro character, which not being ASCII, is currently not displayable in RFCs.</t>
        <t>
          For serializing JSON data according to ES6 the following apply:
          <list style="symbols">
            <t>
              The literals <spanx style="verb">null</spanx>, <spanx style="verb">true</spanx>,
              and <spanx style="verb">false</spanx> present no challenge since they already have a
              fixed definition in JSON <xref target="RFC8259"/>.
            </t>
            <t>
              For data of the type <spanx style="verb">String</spanx> (which includes
              property names as well), each character MUST be serialized as 
              described in Section <xref target="ES6" format="none">24.3.2.2</xref> of ES6:
              <list style="empty">
                <t>
                  If the Unicode value falls within the traditional ASCII control
                  character range (0x00-0x1f), it MUST
                  be rewritten in lowercase hexadecimal notation (\uhhhh) unless it is one
                  of the predefined JSON escapes (\" \\ \b \f \n \r \t) because
                  the latter have precedence. If the Unicode value is outside of
                  the ASCII control character range, it must be emitted &quot;as&nbsp;is&quot;.
                </t>
              </list>
            </t>
            <t>
              Data of the type <spanx style="verb">Number</spanx>, MUST be serialized according to
              Section <xref target="ES6" format="none">7.1.12.1</xref> of ES6.
              For maximum interoperability and correctness,
            </t>
          </list>
        </t>
        <t>
          The final step is converting the textual output into an UTF-8 formatted array.
          Applied to the previous sample this should yield the following bytes here shown in hexadecimal notation:
        </t>
        <t>
          <figure align="center">
            <artwork><![CDATA[  7b 22 65 73 63 61 70 69 6e 67 22 3a 22 e2 82 ac 24 5c 75 30
  30 30 66 5c 6e 41 27 42 5c 22 5c 5c 5c 5c 5c 22 2f 22 2c 22
  6e 75 6d 62 65 72 73 22 3a 5b 31 65 2b 33 30 2c 34 2e 35 2c
  36 2c 30 2e 30 30 32 2c 31 65 2d 32 37 5d 7d]]></artwork>
          </figure>
        </t>
        <t>
          This data is supposed to be usable as interoperable input to cryptographic functions.
        </t>
      </section>
    </section>
    <section anchor="es6.interoperability" title="ES6 Interoperability">
      <t>
        For execution speed optimization reasons, ES6 internally rearranges
        the order of properties with names expressed as integers, making a
        parsed JSON string like
      </t>
      <t>
        <figure align="center">
          <artwork><![CDATA[  {"2":"First","A":"Second","1":"Third"}]]></artwork>
        </figure>
      </t>
      <t>
        actually serialize as
      </t>
      <t>
        <figure align="center">
          <artwork><![CDATA[  {"1":"Third","2":"First","A":"Second"}]]></artwork>
        </figure>
      </t>
      <t>
        which is in conflict with the requirements specified in <xref target="json.proporder"/>.
        Due to this fact, signature creators MUST
        "emulate" this scheme since this behavior is not
        intended to be an additional requirement to support by JSON tools in
        general in order to use this specification.   The easiest way
        accomplishing this is to programmatically make sure that possible
        numeric property names always are created first and added in ascending
        order.
      </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>
        This document has no IANA actions.
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        JSON parsers MUST check that input data conforms to the JSON <xref target="RFC8259"/>
        specification.
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        Building on ES6 number normalization was originally
        proposed by James Manger. This ultimately led to
        the adoption of the entire ES6 JSON processing model.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>
      <?rfc include='reference.RFC.8259'?>
      <?rfc include='reference.RFC.8174'?>

      <reference anchor="ES6" target="https://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf">
        <front>
          <title>ECMAScript 2015 Language Specification</title>
          <author>
            <organization>Ecma International</organization>
          </author>
          <date/>
        </front>
      </reference>
      <reference anchor="IEEE754" target="http://grouper.ieee.org/groups/754/">
        <front>
          <title>IEEE Standard for Floating-Point Arithmetic</title>
          <author>
            <organization>IEEE</organization>
          </author>
          <date month="August" year="2008"/>
        </front>
      </reference>
      <reference anchor="UNICODE" target="https://www.unicode.org/versions/Unicode10.0.0/">
        <front>
          <title>The Unicode Standard, Version 10.0.0</title>
          <author>
            <organization>The Unicode Consortium</organization>
          </author>
          <date/>
        </front>
      </reference>
    </references>
    <references title="Informal References">
      <?rfc include='reference.RFC.4648'?>
      <?rfc include='reference.RFC.7515'?>
      <reference anchor="CT-JWS" target="https://tools.ietf.org/html/draft-erdtman-jose-cleartext-jws-00">
        <front>
          <title>Work-In-Progress: Cleartext JSON Web Signature</title>
          <author>
            <organization>Erdtman, S., Rundgren, A. and M. Jones</organization>
          </author>
          <date month="March" year="2018"/>
        </front>
      </reference>
      <reference anchor="NODEJS" target="https://nodejs.org">
        <front>
          <title>Node.js</title>
          <author/>
          <date/>
        </front>
      </reference>
      <reference anchor="OPENKEY" target="https://github.com/cyberphone/openkeystore">
        <front>
          <title>Open Keystore</title>
          <author/>
          <date/>
        </front>
      </reference>
      <reference anchor="XMLDSIG" target="https://www.w3.org/TR/xmldsig-core1/">
        <front>
          <title>XML Signature Syntax and Processing Version 1.1</title>
          <author>
            <organization>W3C</organization>
          </author>
          <date/>
        </front>
      </reference>
    </references>

    <section anchor="TestVectors" title="Sample Number Serializations">
      <t>
        The following table holds a set of ES6 <spanx style="verb">Number</spanx> serializations including
        some edge cases.  The field  &quot;ES6&nbsp;Internal&quot; refers to the internal
        ES6 representation of the <spanx style="verb">Number</spanx> data type which is based on the
        IEEE-754 <xref target="IEEE754"/> standard using 64-bit precision values, here expressed in hexadecimal.
      </t>
      <t>
        <figure align="center">
          <artwork><![CDATA[|=================================================================|
|   ES6 Internal   |   JSON Representation    |      Comment      |
|=================================================================|
| 0000000000000000 | 0                        |                   |
|-----------------------------------------------------------------|
| 8000000000000000 | 0                        | Minus zero        |
|-----------------------------------------------------------------|
| 0000000000000001 | 5e-324                   | Smallest positive |
|-----------------------------------------------------------------|
| 8000000000000001 | -5e-324                  | Smallest negative |
|-----------------------------------------------------------------|
| 7fefffffffffffff | 1.7976931348623157e+308  | Largest positive  |
|-----------------------------------------------------------------|
| ffefffffffffffff | -1.7976931348623157e+308 | Largest negative  |
|-----------------------------------------------------------------|
| 7fffffffffffffff |                          | Error (NaN)       |
|-----------------------------------------------------------------|
| 44b52d02c7e14af5 | 9.999999999999997e+22    |                   |
|-----------------------------------------------------------------|
| 44b52d02c7e14af6 | 1e+23                    |                   |
|-----------------------------------------------------------------|
| 44b52d02c7e14af7 | 1.0000000000000001e+23   |                   |
|-----------------------------------------------------------------|
| 444b1ae4d6e2ef4e | 999999999999999700000    |                   |
|-----------------------------------------------------------------|
| 444b1ae4d6e2ef4f | 999999999999999900000    |                   |
|-----------------------------------------------------------------|
| 444b1ae4d6e2ef50 | 1e+21                    |                   |
|-----------------------------------------------------------------|
| 444b1ae4d6e2ef51 | 1.0000000000000001e+21   |                   |
|-----------------------------------------------------------------|
| 41b3de4355555553 | 333333333.3333332        |                   |
|-----------------------------------------------------------------|
| 41b3de4355555554 | 333333333.33333325       |                   |
|-----------------------------------------------------------------|
| 41b3de4355555555 | 333333333.3333333        |                   |
|-----------------------------------------------------------------|
| 41b3de4355555556 | 333333333.3333334        |                   |
|-----------------------------------------------------------------|
| 41b3de4355555557 | 333333333.33333343       |                   |
|-----------------------------------------------------------------|]]></artwork>
        </figure>
      </t>
     </section>
  </back>
</rfc>
